{
    parserClass="software.amazon.smithy.intellij.SmithyParser"
    parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"
    extends="software.amazon.smithy.intellij.psi.SmithyPsiElement"
    psiClassPrefix="Smithy"
    psiImplClassSuffix="Impl"
    psiPackage="software.amazon.smithy.intellij.psi"
    psiImplPackage="software.amazon.smithy.intellij.psi.impl"
    elementTypeHolderClass="software.amazon.smithy.intellij.psi.SmithyTypes"
    elementTypeClass="software.amazon.smithy.intellij.SmithyElementType"
    tokenTypeClass="software.amazon.smithy.intellij.SmithyTokenType"
    //Note: some tokens have wrapper/alias rules for better AST generation, so all tokens have TOKEN_ to disambiguate within SmithyTypes
    tokens=[
        //Punctuation
        TOKEN_OPEN_PAREN="("
        TOKEN_CLOSE_PAREN=")"
        TOKEN_OPEN_BRACE="{"
        TOKEN_CLOSE_BRACE="}"
        TOKEN_OPEN_BRACKET="["
        TOKEN_CLOSE_BRACKET="]"
        TOKEN_WALRUS=":="
        TOKEN_COLON=":"
        TOKEN_COMMA=","
        TOKEN_EQUALS="="
        TOKEN_PERIOD="."
        TOKEN_DOLLAR_SIGN="$"
        TOKEN_AT="@"
        TOKEN_HASH="#"
        //Symbols (keywords (not reserved words), identifiers, object keys, etc.)
        TOKEN_APPLY="apply"
        TOKEN_USE="use"
        TOKEN_ENUM="enum"
        TOKEN_INT_ENUM="intEnum"
        TOKEN_LIST="list"
        TOKEN_SET="set"
        TOKEN_MAP="map"
        TOKEN_METADATA="metadata"
        TOKEN_NAMESPACE="namespace"
        TOKEN_STRUCTURE="structure"
        TOKEN_UNION="union"
        TOKEN_SERVICE="service"
        TOKEN_VERSION="version"
        TOKEN_OPERATIONS="operations"
        TOKEN_RESOURCES="resources"
        TOKEN_RENAME="rename"
        TOKEN_OPERATION="operation"
        TOKEN_INPUT="input"
        TOKEN_OUTPUT="output"
        TOKEN_ERRORS="errors"
        TOKEN_RESOURCE="resource"
        TOKEN_IDENTIFIERS="identifiers"
        TOKEN_PROPERTIES="properties"
        TOKEN_CREATE="create"
        TOKEN_PUT="put"
        TOKEN_READ="read"
        TOKEN_UPDATE="update"
        TOKEN_DELETE="delete"
        TOKEN_COLLECTION_OPERATIONS="collectionOperations"
        TOKEN_FOR="for"
        TOKEN_WITH="with"
        TOKEN_NULL="null"
        TOKEN_BOOLEAN="regexp:true|false"
        TOKEN_SIMPLE_TYPE_NAME="regexp:blob|boolean|document|string|byte|short|integer|long|float|double|bigInteger|bigDecimal|timestamp"
        TOKEN_SYMBOL="regexp:_*[A-Za-z][A-Za-z0-9_]*"
        //Literals
        TOKEN_NUMBER="regexp:-?(0|([1-9][0-9]*))(\.[0-9]+)?(e[+-]?[0-9]+)?"
        //Note: both string and text_block regex here permit invalid escape sequences to later on annotate them as errors
        TOKEN_STRING="regexp:\"((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ \t!#-\[\]-\U10FFFF])|(\\?\r?\n))*\""
        TOKEN_TEXT_BLOCK="regexp:\"\"\"\n((\"[^\"])|(\"\"[^\"])|(\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ \t!#-\[\]-\U10FFFF])|(\\[\"]{3})|(\\?\r?\n))*\"\"\""
        //Note: due to limitations with FormattingModelBuilder and DocRenderPassFactory, comments cannot include the trailing line-break as it breaks formatting/rendering, but validation is done within SmithyAnnotator
        TOKEN_LINE_COMMENT="regexp:(//)|(//[^/\n][\t -\U10FFFF]*)"
        TOKEN_DOCUMENTATION_LINE="regexp:///[\t -\U10FFFF]*"
        //Partial-match tokens for intermediate fallback states to avoid returning BAD_CHARACTER when quoted text is being typed out
        //see: https://intellij-support.jetbrains.com/hc/en-us/community/posts/360010554180--Custom-Language-Plugin-Highlighting-not-working-despite-correctly-parsed-psi-file
        TOKEN_INCOMPLETE_STRING="regexp:\"((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ \t!#-\[\]-\U10FFFF]))+"
        TOKEN_INCOMPLETE_TEXT_BLOCK="regexp:\"\"\"\n((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ \t!#-\[\]-\U10FFFF])|(\\[\"]{3})|(\\?\r?\n))+"
    ]
    implements("^(?!.*element).*")="software.amazon.smithy.intellij.psi.SmithyElement"
    implements("array|object|container_body|enum_body|int_enum_body|mixins|operation_body|operation_errors|resource_body|resource_identifiers|resource_properties|resource_operations|resource_collection_operations|resource_resources|service_body|service_operations|service_resources|service_errors|service_renames|applied_trait_body|trait_body")="software.amazon.smithy.intellij.psi.SmithyContainer"
    extends("array|object|primitive")=value
    extends("null|boolean|number|string|text_block|shape_id|member_id")=primitive
    extends("symbol|null|boolean|simple_type_name")=id
    extends("container_shape|simple_shape|enum|int_enum|service|operation|resource")=shape
    extends("operation_input|operation_output|operation_errors")=operation_property
    extends("resource_identifiers|resource_properties|resource_create_operation|resource_put_operation|resource_read_operation|resource_update_operation|resource_delete_operation|resource_list_operation|resource_operations|resource_collection_operations|resource_resources")=resource_entry
    extends("service_version|service_operations|service_resources|service_errors|service_renames")=service_property
    extends("list|set|map|output|structure|union|input|output")=container_shape
    extends("control|entry|metadata")=keyed_element
}
//https://awslabs.github.io/smithy/1.0/spec/core/idl.html
root ::= [model]
model ::= control* metadata* [namespace import* (applied_trait | incomplete_applied_trait | shape | incomplete_definition)*] {
    methods=[control="" metadata="" namespace="" shape="" imports="import" applied_traits="applied_trait" incomplete_applied_trait="" incomplete_definition=""]
    implements="software.amazon.smithy.intellij.psi.SmithyModelExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyModelMixin"
}
control ::= TOKEN_DOLLAR_SIGN key TOKEN_COLON value {
    implements="software.amazon.smithy.intellij.psi.SmithyControlExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyControlMixin"
}
metadata ::= TOKEN_METADATA key TOKEN_EQUALS value {
    implements="software.amazon.smithy.intellij.psi.SmithyMetadataExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMetadataMixin"
}
namespace ::= TOKEN_NAMESPACE namespace_id {
    implements="software.amazon.smithy.intellij.psi.SmithyNamespaceExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNamespaceMixin"
}
import ::= TOKEN_USE shape_id {
    implements="software.amazon.smithy.intellij.psi.SmithyImportExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyImportMixin"
}

//Shapes (excl. inline I/O)
shape ::= simple_shape | enum | int_enum | list | set | map | structure | union | service | operation | resource {
    implements="software.amazon.smithy.intellij.psi.SmithyShapeExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyShapeMixin"
}
simple_shape ::= [documentation] trait* simple_type_name shape_name [mixins] {
    methods=[trait="" simple_type_name="" shape_name="" mixins=""]
}
enum ::= [documentation] trait* TOKEN_ENUM shape_name [mixins] enum_body {
    methods=[trait="" shape_name="" mixins="" body="enum_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyEnumMixin"
}
enum_body ::= TOKEN_OPEN_BRACE ((enum_member | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[enum_member="" incomplete_member=""]
    implements="software.amazon.smithy.intellij.psi.SmithyMemberBodyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberBodyMixin"
}
//Note: to have a better parsing experience, the grammar only requires a node value and SmithyAnnotator adds an error annotation if it's not a string
enum_member ::= [documentation] trait* member_name [member_initializer] {
    methods=[declared_traits="trait" name_identifier="member_name" initializer="member_initializer"]
    implements="software.amazon.smithy.intellij.psi.SmithyEnumMemberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyEnumMemberMixin"
}
int_enum ::= [documentation] trait* TOKEN_INT_ENUM shape_name [mixins] int_enum_body {
    methods=[trait="" shape_name="" mixins="" body="int_enum_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyIntEnumMixin"
}
int_enum_body ::= TOKEN_OPEN_BRACE ((int_enum_member | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[int_enum_member="" incomplete_member=""]
    implements="software.amazon.smithy.intellij.psi.SmithyMemberBodyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberBodyMixin"
}
//Note: to have a better parsing experience, the grammar only requires a node value and SmithyAnnotator adds an error annotation if it's not an integer
int_enum_member ::= [documentation] trait* member_name [member_initializer] {
    methods=[declared_traits="trait" name_identifier="member_name" initializer="member_initializer"]
    implements="software.amazon.smithy.intellij.psi.SmithyIntEnumMemberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyIntEnumMemberMixin"
}
list ::= [documentation] trait* TOKEN_LIST shape_name [mixins] container_body {
    methods=[trait="" shape_name="" mixins="" body="container_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyListMixin"
}
set ::= [documentation] trait* TOKEN_SET shape_name [mixins] container_body {
    methods=[trait="" shape_name="" mixins="" body="container_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithySetMixin"
}
map ::= [documentation] trait* TOKEN_MAP shape_name [mixins] container_body {
    methods=[trait="" shape_name="" mixins="" body="container_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyMapMixin"
}
structure ::= [documentation] trait* TOKEN_STRUCTURE shape_name [resource_reference] [mixins] container_body {
    methods=[trait="" shape_name="" mixins="" body="container_body"]
    implements="software.amazon.smithy.intellij.psi.SmithyStructureExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyStructureMixin"
}
union ::= [documentation] trait* TOKEN_UNION shape_name [mixins] container_body {
    methods=[trait="" shape_name="" mixins="" body="container_body"]
}
service ::= [documentation] trait* TOKEN_SERVICE shape_name [mixins] service_body {
    methods=[trait="" shape_name="" mixins="" body="service_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyServiceMixin"
}
service_body ::= TOKEN_OPEN_BRACE ((service_property | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[properties="service_property" incomplete_member=""]
}
service_property ::= service_version | service_operations | service_resources | service_errors | service_renames
service_version ::= TOKEN_VERSION TOKEN_COLON string
service_operations ::= TOKEN_OPERATIONS TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
service_resources ::= TOKEN_RESOURCES TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
service_errors ::= TOKEN_ERRORS TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
service_renames ::= TOKEN_RENAME TOKEN_COLON TOKEN_OPEN_BRACE (service_rename [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[entries="service_rename"]
}
service_rename ::= key TOKEN_COLON string {
    methods=[value="string"]
}
operation ::= [documentation] trait* TOKEN_OPERATION shape_name [mixins] operation_body {
    methods=[trait="" shape_name="" mixins="" body="operation_body"]
    implements="software.amazon.smithy.intellij.psi.SmithyOperationExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationMixin"
}
operation_body ::= TOKEN_OPEN_BRACE ((operation_property | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
     methods=[properties="operation_property"]
}
operation_property ::= operation_input | operation_output | operation_errors {
    implements="software.amazon.smithy.intellij.psi.SmithyOperationPropertyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationPropertyMixin"
}
operation_input ::= TOKEN_INPUT ((TOKEN_COLON shape_id) | (TOKEN_WALRUS input)) {
    methods=[shape="input"]
    implements="software.amazon.smithy.intellij.psi.SmithyOperationInputExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationInputMixin"
}
input ::= [documentation] trait* [resource_reference] [mixins] container_body {
    methods=[trait="" mixins="" body="container_body"]
    implements="software.amazon.smithy.intellij.psi.SmithyInputExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyInputMixin"
}
operation_output ::= TOKEN_OUTPUT ((TOKEN_COLON shape_id) | (TOKEN_WALRUS output)) {
    methods=[shape="output"]
    implements="software.amazon.smithy.intellij.psi.SmithyOperationOutputExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationOutputMixin"
}
output ::= [documentation] trait* [resource_reference] [mixins] container_body {
    methods=[trait="" mixins="" body="container_body"]
    implements="software.amazon.smithy.intellij.psi.SmithyOutputExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOutputMixin"
}
operation_errors ::= TOKEN_ERRORS TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
    implements="software.amazon.smithy.intellij.psi.SmithyOperationErrorsExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationErrorsMixin"
}
resource ::= [documentation] trait* TOKEN_RESOURCE shape_name [mixins] resource_body {
    methods=[trait="" shape_name="" mixins="" body="resource_body"]
    implements="software.amazon.smithy.intellij.psi.SmithyResourceExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyResourceMixin"
}
resource_body ::= TOKEN_OPEN_BRACE ((resource_entry | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[entries="resource_entry" incomplete_member=""]
}
resource_entry ::= resource_identifiers | resource_properties | resource_create_operation | resource_put_operation
                      | resource_read_operation | resource_update_operation | resource_delete_operation
                      | resource_list_operation | resource_operations | resource_collection_operations | resource_resources {
    implements="software.amazon.smithy.intellij.psi.SmithyResourceEntryExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyResourceEntryMixin"
}
resource_identifier ::= member_name TOKEN_COLON shape_id {
    methods=[name_identifier="member_name" declared_target="shape_id"]
    implements="software.amazon.smithy.intellij.psi.SmithyResourceIdentifierExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyResourceIdentifierMixin"
}
resource_identifiers ::= TOKEN_IDENTIFIERS TOKEN_COLON TOKEN_OPEN_BRACE (resource_identifier [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[identifiers="resource_identifier"]
}
resource_property ::= member_name TOKEN_COLON shape_id {
    methods=[name_identifier="member_name" declared_target="shape_id"]
    implements="software.amazon.smithy.intellij.psi.SmithyResourcePropertyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyResourcePropertyMixin"
}
resource_properties ::= TOKEN_PROPERTIES TOKEN_COLON TOKEN_OPEN_BRACE (resource_property [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[properties="resource_property"]
}
resource_create_operation ::= TOKEN_CREATE TOKEN_COLON shape_id
resource_put_operation ::= TOKEN_PUT TOKEN_COLON shape_id
resource_read_operation ::= TOKEN_READ TOKEN_COLON shape_id
resource_update_operation ::= TOKEN_UPDATE TOKEN_COLON shape_id
resource_delete_operation ::= TOKEN_DELETE TOKEN_COLON shape_id
resource_list_operation ::= TOKEN_LIST TOKEN_COLON shape_id
resource_operations ::= TOKEN_OPERATIONS TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
resource_collection_operations ::= TOKEN_COLLECTION_OPERATIONS TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
resource_resources ::= TOKEN_RESOURCES TOKEN_COLON TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
}
container_body ::= TOKEN_OPEN_BRACE ((container_member | elided_member | incomplete_definition | incomplete_member) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[container_member="" elided_member="" incomplete_definition="" incomplete_member=""]
    implements="software.amazon.smithy.intellij.psi.SmithyMemberBodyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberBodyMixin"
}
container_member ::= [documentation] trait* member_name TOKEN_COLON shape_id [member_initializer] {
    methods=[declared_traits="trait" name_identifier="member_name" declared_target="shape_id" initializer="member_initializer"]
    implements="software.amazon.smithy.intellij.psi.SmithyContainerMemberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyContainerMemberMixin"
}
elided_member ::= [documentation] trait* TOKEN_DOLLAR_SIGN member_name [member_initializer] {
    methods=[declared_traits="trait" name_identifier="member_name" initializer="member_initializer"]
    implements="software.amazon.smithy.intellij.psi.SmithyElidedMemberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyElidedMemberMixin"
}
member_initializer ::= TOKEN_EQUALS value {
    implements="software.amazon.smithy.intellij.psi.SmithyMemberInitializerExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberInitializerMixin"
}
resource_reference ::= TOKEN_FOR shape_id
mixins ::= TOKEN_WITH TOKEN_OPEN_BRACKET (shape_id [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[shapes="shape_id"]
    implements="software.amazon.smithy.intellij.psi.SmithyMixinsExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMixinsMixin"
}

//Traits
applied_trait ::= TOKEN_APPLY (member_id | shape_id) (trait | applied_trait_body) {
    methods=[primitive="" trait="" applied_trait_body=""]
    implements="software.amazon.smithy.intellij.psi.SmithyAppliedTraitExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyAppliedTraitMixin"
}
applied_trait_body ::= TOKEN_OPEN_BRACE trait* TOKEN_CLOSE_BRACE {
    methods=[traits="trait"]
}
trait ::= TOKEN_AT shape_id [trait_body] {
    methods=[body="trait_body" shape="shape_id"]
    implements="software.amazon.smithy.intellij.psi.SmithyTraitExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyTraitMixin"
}
trait_body ::= TOKEN_OPEN_PAREN [trait_values | value] TOKEN_CLOSE_PAREN {
    methods=[entries="entry" incomplete_entry=""]
}
//Note: value and incomplete_entry conflict, so the initial entry in the values list has to be complete entry
private trait_values ::= entry [TOKEN_COMMA] ((entry | incomplete_entry) [TOKEN_COMMA])*

//Node values
key ::= id | string {
    implements="software.amazon.smithy.intellij.psi.SmithyKeyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyKeyMixin"
}
value ::= array | object | primitive {
    implements="software.amazon.smithy.intellij.psi.SmithyValueExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyValueMixin"
}
entry ::= key TOKEN_COLON value {
    implements="software.amazon.smithy.intellij.psi.SmithyEntryExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyEntryMixin"
}
array ::= TOKEN_OPEN_BRACKET (value [TOKEN_COMMA])* TOKEN_CLOSE_BRACKET {
    methods=[values="value"]
    implements="software.amazon.smithy.intellij.psi.SmithyArrayExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyArrayMixin"
}
object ::= TOKEN_OPEN_BRACE ((entry | incomplete_entry) [TOKEN_COMMA])* TOKEN_CLOSE_BRACE {
    methods=[entries="entry" incomplete_entry=""]
    implements="software.amazon.smithy.intellij.psi.SmithyObjectExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyObjectMixin"
}
primitive ::= null | boolean | number | string | text_block | member_id | shape_id

//Shape ID
shape_id ::= [namespace_id TOKEN_HASH] id {
    implements="software.amazon.smithy.intellij.psi.SmithyShapeIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyShapeIdMixin"
}
member_id ::= shape_id TOKEN_DOLLAR_SIGN member_name {
    methods=[member="member_name"]
    implements="software.amazon.smithy.intellij.psi.SmithyMemberIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberIdMixin"
}
namespace_id ::= id (TOKEN_PERIOD id)* {
    methods=[parts="id"]
    implements="software.amazon.smithy.intellij.psi.SmithyNamespaceIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNamespaceIdMixin"
}
shape_name ::= id {methods=[id=""]}
member_name ::= id {methods=[id=""]}
id ::= symbol | null | boolean | simple_type_name
       | TOKEN_APPLY | TOKEN_USE | TOKEN_LIST | TOKEN_SET | TOKEN_MAP | TOKEN_METADATA | TOKEN_NAMESPACE | TOKEN_STRUCTURE
       | TOKEN_UNION | TOKEN_SERVICE | TOKEN_OPERATION | TOKEN_RESOURCE | TOKEN_VERSION | TOKEN_OPERATIONS | TOKEN_RESOURCES
       | TOKEN_RENAME | TOKEN_INPUT | TOKEN_OUTPUT | TOKEN_ERRORS | TOKEN_IDENTIFIERS | TOKEN_PROPERTIES | TOKEN_CREATE
       | TOKEN_PUT | TOKEN_READ | TOKEN_UPDATE | TOKEN_DELETE | TOKEN_COLLECTION_OPERATIONS | TOKEN_ENUM | TOKEN_INT_ENUM
       | TOKEN_FOR | TOKEN_WITH {
    methods=[null="" boolean=""]
    mixin="software.amazon.smithy.intellij.psi.SmithyIdMixin"
}

//Specialized incomplete/intermediate elements which allow for a seamless parsing experience when typing out new entries
//in higher-level nodes without dealing with custom pin/recoverWhile logic in existing AST nodes (since this requires all code to check if the AST node is valid/complete)
//Without these "incomplete" members, the entire file would lose its parser state (and all syntax highlighting/annotations) until the member/entry was completed
incomplete_applied_trait ::= TOKEN_APPLY (member_id | shape_id){
    implements="software.amazon.smithy.intellij.psi.SmithyIncompleteAppliedTraitExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyIncompleteAppliedTraitMixin"
}
incomplete_definition ::= [documentation] trait+
incomplete_member ::= id [TOKEN_COLON]
incomplete_entry ::= key [TOKEN_COLON]

//Re-declared tokens which will receive a dedicated AST node instead of raw PsiElement (since they are used in a meaningful way, like as a variant within another AST node)
null ::= TOKEN_NULL {
    methods=[TOKEN_NULL=""]
    implements="software.amazon.smithy.intellij.psi.SmithyNullExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNullMixin"
}
boolean ::= TOKEN_BOOLEAN {
    methods=[TOKEN_BOOLEAN=""]
    implements="software.amazon.smithy.intellij.psi.SmithyBooleanExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyBooleanMixin"
}
number ::= TOKEN_NUMBER {
    methods=[TOKEN_NUMBER=""]
    implements="software.amazon.smithy.intellij.psi.SmithyNumberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNumberMixin"
}
string ::= TOKEN_STRING {
    methods=[TOKEN_STRING=""]
    implements="software.amazon.smithy.intellij.psi.SmithyStringExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyStringMixin"
}
text_block ::= TOKEN_TEXT_BLOCK {
    methods=[TOKEN_TEXT_BLOCK=""]
    implements="software.amazon.smithy.intellij.psi.SmithyTextBlockExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyTextBlockMixin"
}
symbol ::= TOKEN_SYMBOL {methods=[TOKEN_SYMBOL=""]}
simple_type_name ::= TOKEN_SIMPLE_TYPE_NAME {methods=[TOKEN_SIMPLE_TYPE_NAME=""]}
documentation ::= TOKEN_DOCUMENTATION_LINE+ {
    implements="software.amazon.smithy.intellij.psi.SmithyDocumentationExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyDocumentationMixin"
}
//Fake rules (for introducing superinterfaces into the AST)
fake container_shape ::= container_body {
    methods=[body="container_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyContainerShapeMixin"
}
fake keyed_element ::= key {
    implements=["software.amazon.smithy.intellij.psi.SmithyKeyedElementExt"]
    mixin="software.amazon.smithy.intellij.psi.SmithyKeyedElementMixin"
}
